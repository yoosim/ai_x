1. 텐서플로우(케라스)를 이용한 딥러닝 구형
 : 인공신경망 딥러닝 알고리즘 구현과 실시간 객체 탐지 
  < 텐서플로우 케라스 > 
  ①[tensorflow.Keras]
   레이어 추가 : model.add()
   모델 컴파일 : model.compile()
   모델 훈련 : model.fit()
   tf.keras.Sequential:순차 모델은 여러 층을 연이어 쌓아서 신경망을 구축하는 데 사용됨. 각 층은 이전 층의 출력을 입력으로 받음
   tf.keras.Model:사용자 정의 모델을 만들 때 이 클래스를 상속하여 모델을 정의할 수 있습니다. 이를 사용하면 복잡한 모델 구조를 구현할 수 있음.
   tf.keras.layers:이 모듈은 다양한 종류의 층을 포함하고 있으며, 이를 사용하여 모델의 구조를 정의함. 예를 들어, Dense 층은 완전 연결된 층을 생성하고, Conv2D 층은 합성곱 신경망을 생성함
   tf.keras.losses:손실 함수를 정의하는 데 사용. 모델의 훈련 중에 사용되며, 훈련 중에 최소화하고자 하는 목표 함수를 정의함. 예를 들어, categorical_crossentropy는 다중 클래스 분류 문제의 크로스 엔트로피 손실 함수임
   tf.keras.optimizers:최적화 알고리즘을 선택하고 모델을 훈련하기 위해 사용. 예를 들어, Adam, SGD, RMSprop와 같은 최적화 알고리즘을 제공함.
   tf.keras.metrics:모델의 성능을 평가하기 위한 메트릭을 정의하는 데 사용. 예를 들어, 정확도(accuracy)나 정밀도(precision)를 계산할 수 있음
   tf.keras.callbacks:모델 훈련 중에 호출되는 콜백 함수를 정의하는 데 사용. 예를 들어, 학습률을 동적으로 조정하거나 모델 저장을 자동화하는 데 유용함

※ 독립변수는 reshape을 통해 1차원으로 재정의 -> 실수형 변환(astype) -> 스케일 조정 

  ②함수형 API 이용 : 다중 입력 및 다중 출력 모델 생성 가능
   필수>>
   from tensorflow.keras.layers import Input, Dense
   from tensorflow.keras.layers import concatenate, Activation
	활용 예시)
	input = Input(shape=(4,))
	입력을 받고 / 3개의 레이어층을 나눈 다음 
	dense1 = Dense(50, activation='relu')(input)
	dense2 = Dense(80, activation='relu')(input)
	dense3 = Dense(30, activation='relu')(input)
	x변수에 연결
	x = concatenate([dense1, dense2, dense3])
	output = Dense(3, activation='softmax')(x)
	model = Model(inputs=input, outputs=output)
	model.summary()
  < 합성곱 신경망 > 
  ①이미지 합성곱 
     : 이미지는 2차원이므로 적용하는 필터도 2차원이여야 함.
       필터를 적용할 수 있는 영역에 대해서 현재 주 목화소의 주위 화소의 배열을 각 요소끼리 모두 곱한 후 모든 항목을 더함 
	예)
	0 0 0         0 0 0       0 0 0 
             0 0 1    *   1 1 1   =   0 0 1   = 1 
             0 0 1	   0 0 0 	     0 0 0 	
									
  ②풀링
   Max Pooling : 대상 화소 중에서 가장 큰 화소 값을 선택
   Mean Pooling(Average Pooling) : 대상 화소들의 평균값을 선택
   Min Pooling : 대상 화소 중에서 가장 작은 값을 선택
   Overlapped Pooling : 풀링 사이즈보다 스트라이드가 작을 경우